import logging
import csv
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler
import pytz

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logging.getLogger("apscheduler").setLevel(logging.WARNING)

FILENAME = "medicines.csv"
GROUPS_FILE = "groups.csv"

if not os.path.exists(FILENAME):
    with open(FILENAME, 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["group_id", "name", "expiry_date", "quantity", "symptom"])

if not os.path.exists(GROUPS_FILE):
    with open(GROUPS_FILE, 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["user_id", "group_id"])

def get_user_group(user_id):
    with open(GROUPS_FILE, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['user_id'] == str(user_id):
                return row['group_id']
    return None

def set_user_group(user_id, group_id):
    lines = []
    found = False
    with open(GROUPS_FILE, 'r', encoding='utf-8') as f:
        reader = csv.reader(f)
        lines = list(reader)

    for line in lines:
        if line and line[0] == str(user_id):
            line[1] = group_id
            found = True
            break

    if not found:
        lines.append([str(user_id), group_id])

    with open(GROUPS_FILE, 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerows(lines)

def set_group(update: Update, context: CallbackContext):
    if len(context.args) != 1:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /group <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã>")
        return
    group_id = context.args[0]
    user_id = update.message.chat_id
    set_user_group(user_id, group_id)
    update.message.reply_text(f"–¢–µ–ø–µ—Ä—å –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∞–ø—Ç–µ—á–∫—É –≥—Ä—É–ø–ø—ã: *{group_id}*", parse_mode='Markdown')

def add_medicine(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    group_id = get_user_group(user_id)
    if not group_id:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–ø—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ /group <–∏–º—è>")
        return

    if len(context.args) < 4:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≥–æ–¥–µ–Ω –¥–æ: –ì–ì–ì–ì-–ú–ú-–î–î> <–∫–æ–ª-–≤–æ> <—Å–∏–º–ø—Ç–æ–º—ã>")
        return

    try:
        name = context.args[0].lower()
        expiry = context.args[1]
        qty = int(context.args[2])
        symptom = ' '.join(context.args[3:]).lower()
        datetime.strptime(expiry, "%Y-%m-%d")
    except ValueError:
        update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≥–æ–¥–µ–Ω –¥–æ: –ì–ì–ì–ì-–ú–ú-–î–î> <–∫–æ–ª-–≤–æ> <—Å–∏–º–ø—Ç–æ–º—ã>")
        return

    rows = []
    found = False

    with open(FILENAME, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['group_id'] == group_id and row['name'] == name:
                row['quantity'] = str(int(row['quantity']) + qty)
                if expiry > row['expiry_date']:
                    row['expiry_date'] = expiry
                existing_symptoms = row.get('symptom', '').lower()
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–ø—Ç–æ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (—Ä–∞–∑–¥–µ–ª—è–µ–º —á–µ—Ä–µ–∑ ;)
                existing_set = set(map(str.strip, existing_symptoms.split(';'))) if existing_symptoms else set()
                new_set = set(map(str.strip, symptom.split(';')))
                all_symptoms = existing_set.union(new_set)
                row['symptom'] = '; '.join(sorted(all_symptoms))
                found = True
            rows.append(row)

    if not found:
        rows.append({
            "group_id": group_id,
            "name": name,
            "expiry_date": expiry,
            "quantity": str(qty),
            "symptom": symptom
        })

    with open(FILENAME, 'w', encoding='utf-8', newline='') as f:
        fieldnames = ["group_id", "name", "expiry_date", "quantity", "symptom"]
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(rows)

    update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {name.capitalize()} ‚Äî {qty} —à—Ç., –≥–æ–¥–µ–Ω –¥–æ {expiry}\n–°–∏–º–ø—Ç–æ–º—ã: {symptom}")

def use_medicine(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    group_id = get_user_group(user_id)
    if not group_id:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–ø—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ /group <–∏–º—è>")
        return

    try:
        name = context.args[0].lower()
        used_qty = int(context.args[1])
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /use <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∫–æ–ª-–≤–æ>")
        return

    rows = []
    updated = False

    with open(FILENAME, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['group_id'] == group_id and row['name'] == name:
                current_qty = int(row['quantity'])
                if used_qty > current_qty:
                    update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.")
                    return
                row['quantity'] = str(current_qty - used_qty)
                updated = True
            rows.append(row)

    with open(FILENAME, 'w', encoding='utf-8', newline='') as f:
        fieldnames = ["group_id", "name", "expiry_date", "quantity", "symptom"]
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(rows)

    if updated:
        update.message.reply_text(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {name.capitalize()} ‚Äî {used_qty} —à—Ç.")
    else:
        update.message.reply_text("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def remove_medicine(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    group_id = get_user_group(user_id)
    if not group_id:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–ø—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ /group <–∏–º—è>")
        return

    try:
        name = context.args[0].lower()
    except IndexError:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    rows = []
    removed = False

    with open(FILENAME, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if not (row['group_id'] == group_id and row['name'] == name):
                rows.append(row)
            else:
                removed = True

    with open(FILENAME, 'w', encoding='utf-8', newline='') as f:
        fieldnames = ["group_id", "name", "expiry_date", "quantity", "symptom"]
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(rows)

    if removed:
        update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ: {name.capitalize()}")
    else:
        update.message.reply_text("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def clear_medicines(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    group_id = get_user_group(user_id)
    if not group_id:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–ø—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ /group <–∏–º—è>")
        return

    rows = []
    changed = False

    with open(FILENAME, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['group_id'] != group_id:
                rows.append(row)
            else:
                changed = True

    if not changed:
        update.message.reply_text("–ê–ø—Ç–µ—á–∫–∞ —É–∂–µ –ø—É—Å—Ç–∞.")
        return

    with open(FILENAME, 'w', encoding='utf-8', newline='') as f:
        fieldnames = ["group_id", "name", "expiry_date", "quantity", "symptom"]
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(rows)

    update.message.reply_text("–í—Å—è –∞–ø—Ç–µ—á–∫–∞ –æ—á–∏—â–µ–Ω–∞.")

def list_medicines(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    group_id = get_user_group(user_id)
    if not group_id:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–ø—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ /group <–∏–º—è>")
        return

    output = []

    with open(FILENAME, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['group_id'] == group_id:
                symptoms = row.get('symptom', '')
                output.append(f"‚Ä¢ {row['name'].capitalize()} ‚Äî {row['quantity']} —à—Ç. (–¥–æ {row['expiry_date']})\n  –°–∏–º–ø—Ç–æ–º—ã: {symptoms}")

    if output:
        update.message.reply_text("üß∞ –í–∞—à–∞ –∞–ø—Ç–µ—á–∫–∞:\n\n" + "\n".join(output))
    else:
        update.message.reply_text("üì≠ –ê–ø—Ç–µ—á–∫–∞ –ø—É—Å—Ç–∞.")

def search_medicine(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    group_id = get_user_group(user_id)
    if not group_id:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–ø—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ /group <–∏–º—è>")
        return

    try:
        name = context.args[0].lower()
    except IndexError:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    found = False

    with open(FILENAME, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['group_id'] == group_id and name in row['name']:
                symptoms = row.get('symptom', '')
                update.message.reply_text(
                    f"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: {row['name'].capitalize()}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {row['quantity']} —à—Ç.\n"
                    f"–ì–æ–¥–µ–Ω –¥–æ: {row['expiry_date']}\n"
                    f"–°–∏–º–ø—Ç–æ–º—ã: {symptoms}"
                )
                found = True
                break

    if not found:
        update.message.reply_text("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def search_by_symptom(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    group_id = get_user_group(user_id)
    if not group_id:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–ø—Ç–µ—á–∫—É —á–µ—Ä–µ–∑ /group <–∏–º—è>")
        return

    if not context.args:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /symptom <—Å–∏–º–ø—Ç–æ–º>")
        return

    symptom_query = ' '.join(context.args).lower().strip()

    matched = []

    with open(FILENAME, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['group_id'] == group_id and int(row['quantity']) > 0:
                symptoms = row.get('symptom', '').lower()
                # –°–∏–º–ø—Ç–æ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å —á–µ—Ä–µ–∑ ';', –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                symptom_list = [s.strip() for s in symptoms.split(';') if s.strip()]
                if any(symptom_query in s for s in symptom_list):
                    matched.append(f"{row['name'].capitalize()} ‚Äî {row['quantity']} —à—Ç. (–¥–æ {row['expiry_date']})")

    if matched:
        update.message.reply_text("–õ–µ–∫–∞—Ä—Å—Ç–≤–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Å–∏–º–ø—Ç–æ–º–∞ '{}':\n{}".format(symptom_query, '\n'.join(matched)))
    else:
        update.message.reply_text(f"–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å —Å–∏–º–ø—Ç–æ–º–æ–º '{symptom_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

def check_expired(context: CallbackContext):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏...")
    now = datetime.now().strftime("%Y-%m-%d")
    expired = {}

    with open(FILENAME, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['expiry_date'] < now and int(row['quantity']) > 0:
                group_id = row['group_id']
                if group_id not in expired:
                    expired[group_id] = []
                expired[group_id].append(f"{row['name'].capitalize()} (–≥–æ–¥–µ–Ω –¥–æ {row['expiry_date']})")

    for group_id, meds in expired.items():
        with open(GROUPS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row['group_id'] == group_id:
                    chat_id = int(row['user_id'])
                    context.bot.send_message(chat_id=chat_id,
                                             text="‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n" + "\n".join(meds))

def manual_check(update: Update, context: CallbackContext):
    # –ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
    check_expired(context)
    update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def main():
    # Telegram bot
    TOKEN = "8030082684:AAHZXl3DJsn5MMambFnCYKIDcfKONDxppzA"
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("group", set_group))
    dp.add_handler(CommandHandler("add", add_medicine))
    dp.add_handler(CommandHandler("use", use_medicine))
    dp.add_handler(CommandHandler("remove", remove_medicine))  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏ /delete —Å –∞–ª–∏–∞—Å–æ–º
    dp.add_handler(CommandHandler("delete", remove_medicine))
    dp.add_handler(CommandHandler("clear", clear_medicines))
    dp.add_handler(CommandHandler("list", list_medicines))
    dp.add_handler(CommandHandler("find", search_medicine))
    dp.add_handler(CommandHandler("symptom", search_by_symptom))
    dp.add_handler(CommandHandler("check", manual_check))

    scheduler = BackgroundScheduler(timezone=pytz.timezone("Europe/Moscow"))
    scheduler.add_job(check_expired, 'cron', hour=9, minute=0, args=(updater.bot,))
    scheduler.start()

    # ‚ùóÔ∏è–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –ì–õ–ê–í–ù–û–ú –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª–∞—Å—å
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Flask –¥–ª—è Render

from flask import Flask
from threading import Thread

app = Flask(__name__)

@app.route('/')
def home():
    return "I'm alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

Thread(target=run).start()

